name: CI/CD using github actions & docker

on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "deploy" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    # 백엔드 빌드 전에 application-secret.properties 파일 생성
    - name: Create application-secret.properties
      run: |
        echo "${{ secrets.BACKEND_SECRET_PROPERTIES }}" > ./backend/src/main/resources/application-secret.properties
        

    # 백엔드 Gradle 빌드
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Build Backend with Gradle Skip tests
      run: ./gradlew build -x test
      working-directory: ./backend/demo

    # Docker 로그인 (공통)
    - name: Docker login
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    # 백엔드 Docker build & push
    - name: Docker build & push - Backend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-app ./backend/demo
        docker push ${{ secrets.DOCKER_USERNAME }}/backend-app

    # 프론트엔드 환경변수 파일 생성
    - name: Inject .env.production for Frontend
      run: |
        echo "${{ secrets.FRONTEND_ENV }}" > ./frontend/app/.env.production


    # 프론트엔드 Docker build & push
    - name: Docker build & push - Frontend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app ./frontend/app
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app

    # EC2 배포
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Docker Hub에서 최신 이미지 pull
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

          # 기존 컨테이너 정리
          sudo docker stop frontend || true
          sudo docker rm frontend || true
          sudo docker stop backend || true
          sudo docker rm backend || true

          # 컨테이너 직접 실행 (파일 복사 없이)
          sudo docker run -d --name backend \
            -e SPRING_PROFILES_ACTIVE=prod \
            -p 8080:8080 \
            --memory="512m" \
            --memory-swap="1g" \
            ${{ secrets.DOCKER_USERNAME }}/backend-app:latest \
            -Xmx256m -Xms128m --spring.profiles.active=prod


          # 프론트엔드 컨테이너 실행
          sudo docker run -d --name frontend -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

          # 정리
          sudo docker container prune -f
          sudo docker image prune -a -f
